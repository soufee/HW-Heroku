{"version":3,"file":"Field.js","sourceRoot":"","sources":["src/Field.ts"],"names":[],"mappings":"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","sourcesContent":["import { ElementPart, noChange, nothing, PropertyPart } from 'lit';\nimport { directive, Directive, DirectiveParameters, PartInfo, PartType } from 'lit/directive.js';\nimport { _fromString, AbstractModel, getBinderNode } from './Models.js';\n\ninterface Field {\n  required: boolean;\n  invalid: boolean;\n  errorMessage: string;\n  value: any;\n}\ninterface FieldState extends Field {\n  name: string;\n  strategy: FieldStrategy;\n}\nexport interface FieldStrategy extends Field {\n  element: Element;\n}\n\nexport abstract class AbstractFieldStrategy implements FieldStrategy {\n  public abstract required: boolean;\n\n  public abstract invalid: boolean;\n\n  public element: Element & Field;\n\n  public constructor(element: Element & Field) {\n    this.element = element;\n  }\n\n  public validate = async () => [];\n\n  public get value() {\n    return this.element.value;\n  }\n\n  public set value(value) {\n    this.element.value = value;\n  }\n\n  public set errorMessage(_: string) {} // eslint-disable-line @typescript-eslint/no-empty-function\n\n  public setAttribute(key: string, val: any) {\n    if (val) {\n      this.element.setAttribute(key, '');\n    } else {\n      this.element.removeAttribute(key);\n    }\n  }\n}\n\nexport class VaadinFieldStrategy extends AbstractFieldStrategy {\n  public set required(value: boolean) {\n    this.element.required = value;\n  }\n\n  public set invalid(value: boolean) {\n    this.element.invalid = value;\n  }\n\n  public override set errorMessage(value: string) {\n    this.element.errorMessage = value;\n  }\n}\n\nexport class GenericFieldStrategy extends AbstractFieldStrategy {\n  public set required(value: boolean) {\n    this.setAttribute('required', value);\n  }\n\n  public set invalid(value: boolean) {\n    this.setAttribute('invalid', value);\n  }\n}\n\nexport class CheckedFieldStrategy extends GenericFieldStrategy {\n  public override set value(val: any) {\n    (this.element as any).checked = /^(true|on)$/i.test(String(val));\n  }\n\n  public override get value() {\n    return (this.element as any).checked;\n  }\n}\n\nexport class ComboBoxFieldStrategy extends VaadinFieldStrategy {\n  public override get value() {\n    const { selectedItem } = this.element as any;\n    return selectedItem === null ? undefined : selectedItem;\n  }\n\n  public override set value(val: any) {\n    (this.element as any).selectedItem = val === undefined ? null : val;\n  }\n}\n\nexport class SelectedFieldStrategy extends GenericFieldStrategy {\n  public override set value(val: any) {\n    (this.element as any).selected = val;\n  }\n\n  public override get value() {\n    return (this.element as any).selected;\n  }\n}\n\nexport function getDefaultFieldStrategy(elm: any): FieldStrategy {\n  switch (elm.localName) {\n    case 'vaadin-checkbox':\n    case 'vaadin-radio-button':\n      return new CheckedFieldStrategy(elm);\n    case 'vaadin-combo-box':\n      return new ComboBoxFieldStrategy(elm);\n    case 'vaadin-list-box':\n      return new SelectedFieldStrategy(elm);\n    case 'vaadin-rich-text-editor':\n      return new GenericFieldStrategy(elm);\n    default:\n      if (elm.localName === 'input' && /^(checkbox|radio)$/.test(elm.type)) {\n        return new CheckedFieldStrategy(elm);\n      }\n      return elm.constructor.version ? new VaadinFieldStrategy(elm) : new GenericFieldStrategy(elm);\n  }\n}\n\n/**\n * Binds a form field component into a model.\n *\n * Example usage:\n *\n * ```\n * <vaadin-text-field ...=\"${field(model.name)}\">\n * </vaadin-text-field>\n * ```\n */\nexport const field = directive(\n  class extends Directive {\n    public fieldState?: FieldState;\n\n    public constructor(partInfo: PartInfo) {\n      super(partInfo);\n      if (partInfo.type !== PartType.PROPERTY && partInfo.type !== PartType.ELEMENT) {\n        throw new Error('Use as \"<element {field(...)}\" or <element ...={field(...)}\"');\n      }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    public render(model: AbstractModel<any>, effect?: (element: Element) => void) {\n      return nothing;\n    }\n\n    public override update(part: PropertyPart | ElementPart, [model, effect]: DirectiveParameters<this>) {\n      const element = part.element as HTMLInputElement & Field;\n\n      const binderNode = getBinderNode(model);\n      const fieldStrategy = binderNode.binder.getFieldStrategy(element);\n\n      const convertFieldValue = (fieldValue: any) => {\n        const fromString = (model as any)[_fromString];\n        return typeof fieldValue === 'string' && fromString ? fromString(fieldValue) : fieldValue;\n      };\n\n      if (!this.fieldState) {\n        this.fieldState = {\n          name: '',\n          value: '',\n          required: false,\n          invalid: false,\n          errorMessage: '',\n          strategy: fieldStrategy,\n        };\n\n        const { fieldState } = this;\n\n        const updateValueFromElement = () => {\n          fieldState.value = fieldState.strategy.value;\n          binderNode.value = convertFieldValue(fieldState.value);\n          if (effect !== undefined) {\n            effect.call(element, element);\n          }\n        };\n\n        element.oninput = () => {\n          updateValueFromElement();\n        };\n\n        const changeBlurHandler = () => {\n          updateValueFromElement();\n          binderNode.visited = true;\n        };\n        element.onblur = changeBlurHandler;\n        element.onchange = changeBlurHandler;\n\n        element.checkValidity = () => !fieldState.invalid;\n      }\n\n      const { fieldState } = this;\n      const { name } = binderNode;\n      if (name !== fieldState.name) {\n        fieldState.name = name;\n        element.setAttribute('name', name);\n      }\n\n      const { value } = binderNode;\n      const valueFromField = convertFieldValue(fieldState.value);\n      if (value !== valueFromField && !(Number.isNaN(value) && Number.isNaN(valueFromField))) {\n        fieldState.value = value;\n        fieldState.strategy.value = value;\n      }\n\n      const { required } = binderNode;\n      if (required !== fieldState.required) {\n        fieldState.required = required;\n        fieldState.strategy.required = required;\n      }\n\n      const firstError = binderNode.ownErrors ? binderNode.ownErrors[0] : undefined;\n      const errorMessage = (firstError && firstError.message) || '';\n      if (errorMessage !== fieldState.errorMessage) {\n        fieldState.errorMessage = errorMessage;\n        fieldState.strategy.errorMessage = errorMessage;\n      }\n\n      const { invalid } = binderNode;\n      if (invalid !== fieldState.invalid) {\n        fieldState.invalid = invalid;\n        fieldState.strategy.invalid = invalid;\n      }\n\n      return noChange;\n    }\n  },\n);\n"]}